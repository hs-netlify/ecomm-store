{
  "version": 3,
  "sources": ["../../stackbit.config.js", "../models/GlobalStyles.js", "../models/AltHero.js", "../models/AltPage.js"],
  "sourcesContent": ["import { ContentfulContentSource } from \"@stackbit/cms-contentful\";\nimport { GitContentSource } from \"@stackbit/cms-git\";\nimport { GlobalStyles } from \"./.stackbit/models/GlobalStyles\";\nimport { AltPage } from \"./.stackbit/models/AltPage\";\nimport { AltHero } from \"./.stackbit/models/AltHero\";\n\nconst contentfulSource = new ContentfulContentSource({\n  spaceId: process.env.CONTENTFUL_SPACE_ID,\n  environment: process.env.CONTENTFUL_ENVIRONMENT || \"master\",\n  previewToken: process.env.CONTENTFUL_PREVIEW_TOKEN,\n  accessToken: process.env.CONTENTFUL_MANAGEMENT_TOKEN,\n});\n\nconst gitSource = new GitContentSource({\n  rootPath: __dirname,\n  contentDirs: [\"content\"],\n  assetsConfig: {\n    referenceType: \"static\",\n    staticDir: \"public\",\n    uploadDir: \"images\",\n    publicPath: \"/\",\n  },\n  models: [GlobalStyles, AltPage, AltHero],\n});\nconst config = {\n  stackbitVersion: \"~0.6.0\",\n  ssgName: \"nextjs\",\n  nodeVersion: \"18\",\n  contentSources: [contentfulSource, gitSource],\n\n  modelExtensions: [\n    {\n      name: \"page\",\n      type: \"page\",\n      urlPath: \"/{slug}\",\n      fields: [{ name: \"backgroundColor\", type: \"color\", default: \"#ffffff\" }],\n    },\n  ],\n};\n\nexport default config;\n", "export const GlobalStyles = {\n  type: 'data',\n  label: 'Global styles',\n  filePath: './content/style.json',\n  name: 'GlobalStyles',\n  fields: [\n    {\n      type: 'enum',\n      name: 'mode',\n      controlType: 'button-group',\n      options: [\n        { label: 'Light', value: 'light' },\n        { label: 'Dark', value: 'dark' },\n      ],\n      default: 'light',\n    },\n    { type: 'color', name: 'primaryColor', label: 'Primary color' },\n    { type: 'color', name: 'secondaryColor', label: 'Secondary color' },\n  ],\n};\n", "import { v4 as uuidv4 } from \"uuid\";\n\nexport const AltHero = {\n  name: \"AltHero\",\n  type: \"data\",\n  label: \"Alt Hero\",\n  filePath: `content/data/alt-hero-${uuidv4()}.json`,\n\n  fieldGroups: [{ name: \"styles\", label: \"Styles\", icon: \"palette\" }],\n\n  fields: [\n    {\n      name: \"title\",\n      type: \"string\",\n      actions: [\n        {\n          name: \"generate-title\",\n          label: \"Generate Title\",\n          run: async (options) => {\n            const { faker } = await import(\"@faker-js/faker\");\n            const document = options.currentPageDocument;\n            if (!document) return;\n            // Send feedback in the appropriate context\n            const logger = options.getLogger();\n            logger.debug(\n              `Running generate-title action on page: ${document.id}`\n            );\n            // Generate title\n            const newTitle = faker.lorem.words(4);\n            logger.debug(`This is the ref: ${document}`);\n            // Update the document with the new random title\n            options.contentSourceActions.updateDocument({\n              document,\n              userContext: options.getUserContextForContentSourceType(\n                document.srcType\n              ),\n\n              operations: [\n                {\n                  opType: \"set\",\n                  fieldPath: options.fieldPath,\n                  modelField: options.modelField,\n                  field: { type: \"string\", value: newTitle },\n                },\n              ],\n            });\n            logger.debug(\"Finished generate-title action\");\n          },\n        },\n      ],\n    },\n    {\n      name: \"description\",\n      type: \"string\",\n    },\n    { name: \"heroImage\", type: \"image\" },\n    {\n      name: \"reverseContent\",\n      type: \"boolean\",\n      default: false,\n    },\n    {\n      name: \"backgroundColor\",\n      type: \"color\",\n      default: \"#e60606\",\n      group: \"styles\",\n    },\n\n    {\n      name: \"styles\",\n      type: \"style\",\n      styles: {\n        title: { fontSize: \"*\" },\n        heroImage: { width: [\"narrow\", \"wide\"] },\n        description: {\n          fontSize: \"*\",\n          fontStyle: [\"italic\", \"normal\"],\n        },\n      },\n    },\n  ],\n};\n", "import { AltHero } from \"./AltHero\";\nexport const AltPage = {\n  type: \"page\",\n  label: \"Alt Page\",\n  filePath: `content/pages/{slug}.json`,\n  name: \"AltPage\",\n  urlPath: \"/alt/{slug}\",\n  localized: true,\n  fields: [\n    { name: \"title\", type: \"string\", required: true },\n\n    { name: \"slug\", type: \"slug\", required: true },\n    {\n      name: \"sections\",\n      type: \"list\",\n      items: { type: \"model\", models: [\"AltHero\"] },\n    },\n    {\n      name: \"showJson\",\n      label: \"Show JSON\",\n      type: \"boolean\",\n      default: false,\n    },\n  ],\n};\n"],
  "mappings": "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",
  "names": ["uuidv4"]
}
